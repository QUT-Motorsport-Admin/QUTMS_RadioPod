
RadioPod_c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000518  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  0000056c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000059c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fcf  00000000  00000000  000006b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004a6  00000000  00000000  00001683  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000872  00000000  00000000  00001b29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000264  00000000  00000000  0000239c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005b9  00000000  00000000  00002600  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007fa  00000000  00000000  00002bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  000033b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	f9 c0       	rjmp	.+498    	; 0x1f4 <__ctors_end>
   2:	00 00       	nop
   4:	05 c1       	rjmp	.+522    	; 0x210 <__bad_interrupt>
   6:	00 00       	nop
   8:	03 c1       	rjmp	.+518    	; 0x210 <__bad_interrupt>
   a:	00 00       	nop
   c:	01 c1       	rjmp	.+514    	; 0x210 <__bad_interrupt>
   e:	00 00       	nop
  10:	ff c0       	rjmp	.+510    	; 0x210 <__bad_interrupt>
  12:	00 00       	nop
  14:	fd c0       	rjmp	.+506    	; 0x210 <__bad_interrupt>
  16:	00 00       	nop
  18:	fb c0       	rjmp	.+502    	; 0x210 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	f9 c0       	rjmp	.+498    	; 0x210 <__bad_interrupt>
  1e:	00 00       	nop
  20:	f7 c0       	rjmp	.+494    	; 0x210 <__bad_interrupt>
  22:	00 00       	nop
  24:	f5 c0       	rjmp	.+490    	; 0x210 <__bad_interrupt>
  26:	00 00       	nop
  28:	f3 c0       	rjmp	.+486    	; 0x210 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	f1 c0       	rjmp	.+482    	; 0x210 <__bad_interrupt>
  2e:	00 00       	nop
  30:	ef c0       	rjmp	.+478    	; 0x210 <__bad_interrupt>
  32:	00 00       	nop
  34:	ed c0       	rjmp	.+474    	; 0x210 <__bad_interrupt>
  36:	00 00       	nop
  38:	eb c0       	rjmp	.+470    	; 0x210 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	e9 c0       	rjmp	.+466    	; 0x210 <__bad_interrupt>
  3e:	00 00       	nop
  40:	e7 c0       	rjmp	.+462    	; 0x210 <__bad_interrupt>
  42:	00 00       	nop
  44:	e5 c0       	rjmp	.+458    	; 0x210 <__bad_interrupt>
  46:	00 00       	nop
  48:	e3 c0       	rjmp	.+454    	; 0x210 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	e1 c0       	rjmp	.+450    	; 0x210 <__bad_interrupt>
  4e:	00 00       	nop
  50:	df c0       	rjmp	.+446    	; 0x210 <__bad_interrupt>
  52:	00 00       	nop
  54:	dd c0       	rjmp	.+442    	; 0x210 <__bad_interrupt>
  56:	00 00       	nop
  58:	db c0       	rjmp	.+438    	; 0x210 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	d9 c0       	rjmp	.+434    	; 0x210 <__bad_interrupt>
  5e:	00 00       	nop
  60:	d7 c0       	rjmp	.+430    	; 0x210 <__bad_interrupt>
  62:	00 00       	nop
  64:	d5 c0       	rjmp	.+426    	; 0x210 <__bad_interrupt>
  66:	00 00       	nop
  68:	d3 c0       	rjmp	.+422    	; 0x210 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	d1 c0       	rjmp	.+418    	; 0x210 <__bad_interrupt>
  6e:	00 00       	nop
  70:	cf c0       	rjmp	.+414    	; 0x210 <__bad_interrupt>
  72:	00 00       	nop
  74:	cd c0       	rjmp	.+410    	; 0x210 <__bad_interrupt>
  76:	00 00       	nop
  78:	cb c0       	rjmp	.+406    	; 0x210 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	c9 c0       	rjmp	.+402    	; 0x210 <__bad_interrupt>
  7e:	00 00       	nop
  80:	c7 c0       	rjmp	.+398    	; 0x210 <__bad_interrupt>
  82:	00 00       	nop
  84:	c5 c0       	rjmp	.+394    	; 0x210 <__bad_interrupt>
  86:	00 00       	nop
  88:	c3 c0       	rjmp	.+390    	; 0x210 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	c1 c0       	rjmp	.+386    	; 0x210 <__bad_interrupt>
  8e:	00 00       	nop
  90:	bf c0       	rjmp	.+382    	; 0x210 <__bad_interrupt>
  92:	00 00       	nop
  94:	bd c0       	rjmp	.+378    	; 0x210 <__bad_interrupt>
  96:	00 00       	nop
  98:	bb c0       	rjmp	.+374    	; 0x210 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	b9 c0       	rjmp	.+370    	; 0x210 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	b7 c0       	rjmp	.+366    	; 0x210 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	b5 c0       	rjmp	.+362    	; 0x210 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	b3 c0       	rjmp	.+358    	; 0x210 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	b1 c0       	rjmp	.+354    	; 0x210 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	af c0       	rjmp	.+350    	; 0x210 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	ad c0       	rjmp	.+346    	; 0x210 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	ab c0       	rjmp	.+342    	; 0x210 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	a9 c0       	rjmp	.+338    	; 0x210 <__bad_interrupt>
  be:	00 00       	nop
  c0:	a7 c0       	rjmp	.+334    	; 0x210 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	a5 c0       	rjmp	.+330    	; 0x210 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	a3 c0       	rjmp	.+326    	; 0x210 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	a1 c0       	rjmp	.+322    	; 0x210 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	9f c0       	rjmp	.+318    	; 0x210 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	9d c0       	rjmp	.+314    	; 0x210 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	9b c0       	rjmp	.+310    	; 0x210 <__bad_interrupt>
  da:	00 00       	nop
  dc:	99 c0       	rjmp	.+306    	; 0x210 <__bad_interrupt>
  de:	00 00       	nop
  e0:	97 c0       	rjmp	.+302    	; 0x210 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	95 c0       	rjmp	.+298    	; 0x210 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	93 c0       	rjmp	.+294    	; 0x210 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	91 c0       	rjmp	.+290    	; 0x210 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	8f c0       	rjmp	.+286    	; 0x210 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	8d c0       	rjmp	.+282    	; 0x210 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	8b c0       	rjmp	.+278    	; 0x210 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	89 c0       	rjmp	.+274    	; 0x210 <__bad_interrupt>
  fe:	00 00       	nop
 100:	87 c0       	rjmp	.+270    	; 0x210 <__bad_interrupt>
 102:	00 00       	nop
 104:	85 c0       	rjmp	.+266    	; 0x210 <__bad_interrupt>
 106:	00 00       	nop
 108:	83 c0       	rjmp	.+262    	; 0x210 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	81 c0       	rjmp	.+258    	; 0x210 <__bad_interrupt>
 10e:	00 00       	nop
 110:	7f c0       	rjmp	.+254    	; 0x210 <__bad_interrupt>
 112:	00 00       	nop
 114:	7d c0       	rjmp	.+250    	; 0x210 <__bad_interrupt>
 116:	00 00       	nop
 118:	7b c0       	rjmp	.+246    	; 0x210 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	79 c0       	rjmp	.+242    	; 0x210 <__bad_interrupt>
 11e:	00 00       	nop
 120:	77 c0       	rjmp	.+238    	; 0x210 <__bad_interrupt>
 122:	00 00       	nop
 124:	75 c0       	rjmp	.+234    	; 0x210 <__bad_interrupt>
 126:	00 00       	nop
 128:	73 c0       	rjmp	.+230    	; 0x210 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	71 c0       	rjmp	.+226    	; 0x210 <__bad_interrupt>
 12e:	00 00       	nop
 130:	6f c0       	rjmp	.+222    	; 0x210 <__bad_interrupt>
 132:	00 00       	nop
 134:	6d c0       	rjmp	.+218    	; 0x210 <__bad_interrupt>
 136:	00 00       	nop
 138:	6b c0       	rjmp	.+214    	; 0x210 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	69 c0       	rjmp	.+210    	; 0x210 <__bad_interrupt>
 13e:	00 00       	nop
 140:	67 c0       	rjmp	.+206    	; 0x210 <__bad_interrupt>
 142:	00 00       	nop
 144:	65 c0       	rjmp	.+202    	; 0x210 <__bad_interrupt>
 146:	00 00       	nop
 148:	63 c0       	rjmp	.+198    	; 0x210 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	61 c0       	rjmp	.+194    	; 0x210 <__bad_interrupt>
 14e:	00 00       	nop
 150:	5f c0       	rjmp	.+190    	; 0x210 <__bad_interrupt>
 152:	00 00       	nop
 154:	5d c0       	rjmp	.+186    	; 0x210 <__bad_interrupt>
 156:	00 00       	nop
 158:	5b c0       	rjmp	.+182    	; 0x210 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	59 c0       	rjmp	.+178    	; 0x210 <__bad_interrupt>
 15e:	00 00       	nop
 160:	57 c0       	rjmp	.+174    	; 0x210 <__bad_interrupt>
 162:	00 00       	nop
 164:	55 c0       	rjmp	.+170    	; 0x210 <__bad_interrupt>
 166:	00 00       	nop
 168:	53 c0       	rjmp	.+166    	; 0x210 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	51 c0       	rjmp	.+162    	; 0x210 <__bad_interrupt>
 16e:	00 00       	nop
 170:	4f c0       	rjmp	.+158    	; 0x210 <__bad_interrupt>
 172:	00 00       	nop
 174:	4d c0       	rjmp	.+154    	; 0x210 <__bad_interrupt>
 176:	00 00       	nop
 178:	4b c0       	rjmp	.+150    	; 0x210 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	49 c0       	rjmp	.+146    	; 0x210 <__bad_interrupt>
 17e:	00 00       	nop
 180:	47 c0       	rjmp	.+142    	; 0x210 <__bad_interrupt>
 182:	00 00       	nop
 184:	45 c0       	rjmp	.+138    	; 0x210 <__bad_interrupt>
 186:	00 00       	nop
 188:	43 c0       	rjmp	.+134    	; 0x210 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	41 c0       	rjmp	.+130    	; 0x210 <__bad_interrupt>
 18e:	00 00       	nop
 190:	3f c0       	rjmp	.+126    	; 0x210 <__bad_interrupt>
 192:	00 00       	nop
 194:	3d c0       	rjmp	.+122    	; 0x210 <__bad_interrupt>
 196:	00 00       	nop
 198:	3b c0       	rjmp	.+118    	; 0x210 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	39 c0       	rjmp	.+114    	; 0x210 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	37 c0       	rjmp	.+110    	; 0x210 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	35 c0       	rjmp	.+106    	; 0x210 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	33 c0       	rjmp	.+102    	; 0x210 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	31 c0       	rjmp	.+98     	; 0x210 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	2f c0       	rjmp	.+94     	; 0x210 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	2d c0       	rjmp	.+90     	; 0x210 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	2b c0       	rjmp	.+86     	; 0x210 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	29 c0       	rjmp	.+82     	; 0x210 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	27 c0       	rjmp	.+78     	; 0x210 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	25 c0       	rjmp	.+74     	; 0x210 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	23 c0       	rjmp	.+70     	; 0x210 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	21 c0       	rjmp	.+66     	; 0x210 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	1f c0       	rjmp	.+62     	; 0x210 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	1d c0       	rjmp	.+58     	; 0x210 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	1b c0       	rjmp	.+54     	; 0x210 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	19 c0       	rjmp	.+50     	; 0x210 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	17 c0       	rjmp	.+46     	; 0x210 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	15 c0       	rjmp	.+42     	; 0x210 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	13 c0       	rjmp	.+38     	; 0x210 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	11 c0       	rjmp	.+34     	; 0x210 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	0f c0       	rjmp	.+30     	; 0x210 <__bad_interrupt>
	...

000001f4 <__ctors_end>:
 1f4:	11 24       	eor	r1, r1
 1f6:	1f be       	out	0x3f, r1	; 63
 1f8:	cf ef       	ldi	r28, 0xFF	; 255
 1fa:	cd bf       	out	0x3d, r28	; 61
 1fc:	df e3       	ldi	r29, 0x3F	; 63
 1fe:	de bf       	out	0x3e, r29	; 62
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	0c bf       	out	0x3c, r16	; 60
 204:	18 be       	out	0x38, r1	; 56
 206:	19 be       	out	0x39, r1	; 57
 208:	1a be       	out	0x3a, r1	; 58
 20a:	1b be       	out	0x3b, r1	; 59
 20c:	30 d1       	rcall	.+608    	; 0x46e <main>
 20e:	82 c1       	rjmp	.+772    	; 0x514 <_exit>

00000210 <__bad_interrupt>:
 210:	f7 ce       	rjmp	.-530    	; 0x0 <__vectors>

00000212 <MCP2515_reg_write>:
			MCP2515_reg_write(MCP2515_RXM1EID0, IDmsk & 0xFF );
			if(IDmsk) MCP2515_reg_write(MCP2515_RXB1CTRL, 0b00000000);	//Enable reception using masks and filters. 
			else MCP2515_reg_write(MCP2515_RXB1CTRL, 0b01100000);		//Enable reception without masks and filters.
	}	
	return 1;
}
 212:	0f 93       	push	r16
 214:	1f 93       	push	r17
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	08 2f       	mov	r16, r24
 21c:	16 2f       	mov	r17, r22
 21e:	c4 e4       	ldi	r28, 0x44	; 68
 220:	d6 e0       	ldi	r29, 0x06	; 6
 222:	98 81       	ld	r25, Y
 224:	9f 7e       	andi	r25, 0xEF	; 239
 226:	98 83       	st	Y, r25
 228:	82 e0       	ldi	r24, 0x02	; 2
 22a:	61 d1       	rcall	.+706    	; 0x4ee <SPI_send_byte>
 22c:	80 2f       	mov	r24, r16
 22e:	5f d1       	rcall	.+702    	; 0x4ee <SPI_send_byte>
 230:	81 2f       	mov	r24, r17
 232:	5d d1       	rcall	.+698    	; 0x4ee <SPI_send_byte>
 234:	88 81       	ld	r24, Y
 236:	80 61       	ori	r24, 0x10	; 16
 238:	88 83       	st	Y, r24
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	1f 91       	pop	r17
 240:	0f 91       	pop	r16
 242:	08 95       	ret

00000244 <MCP2515_instruction>:
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	c4 e4       	ldi	r28, 0x44	; 68
 24a:	d6 e0       	ldi	r29, 0x06	; 6
 24c:	98 81       	ld	r25, Y
 24e:	9f 7e       	andi	r25, 0xEF	; 239
 250:	98 83       	st	Y, r25
 252:	4d d1       	rcall	.+666    	; 0x4ee <SPI_send_byte>
 254:	88 81       	ld	r24, Y
 256:	80 61       	ori	r24, 0x10	; 16
 258:	88 83       	st	Y, r24
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	08 95       	ret

00000260 <MCP2515_bit_modify>:
 260:	ff 92       	push	r15
 262:	0f 93       	push	r16
 264:	1f 93       	push	r17
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	f8 2e       	mov	r15, r24
 26c:	16 2f       	mov	r17, r22
 26e:	04 2f       	mov	r16, r20
 270:	c4 e4       	ldi	r28, 0x44	; 68
 272:	d6 e0       	ldi	r29, 0x06	; 6
 274:	98 81       	ld	r25, Y
 276:	9f 7e       	andi	r25, 0xEF	; 239
 278:	98 83       	st	Y, r25
 27a:	85 e0       	ldi	r24, 0x05	; 5
 27c:	38 d1       	rcall	.+624    	; 0x4ee <SPI_send_byte>
 27e:	8f 2d       	mov	r24, r15
 280:	36 d1       	rcall	.+620    	; 0x4ee <SPI_send_byte>
 282:	80 2f       	mov	r24, r16
 284:	34 d1       	rcall	.+616    	; 0x4ee <SPI_send_byte>
 286:	81 2f       	mov	r24, r17
 288:	32 d1       	rcall	.+612    	; 0x4ee <SPI_send_byte>
 28a:	88 81       	ld	r24, Y
 28c:	80 61       	ori	r24, 0x10	; 16
 28e:	88 83       	st	Y, r24
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	1f 91       	pop	r17
 296:	0f 91       	pop	r16
 298:	ff 90       	pop	r15
 29a:	08 95       	ret

0000029c <MCP2515_init>:
 29c:	e4 e4       	ldi	r30, 0x44	; 68
 29e:	f6 e0       	ldi	r31, 0x06	; 6
 2a0:	80 81       	ld	r24, Z
 2a2:	87 7f       	andi	r24, 0xF7	; 247
 2a4:	80 83       	st	Z, r24
 2a6:	8f e8       	ldi	r24, 0x8F	; 143
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <MCP2515_init+0xe>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <MCP2515_init+0x14>
 2b0:	00 00       	nop
 2b2:	80 81       	ld	r24, Z
 2b4:	88 60       	ori	r24, 0x08	; 8
 2b6:	80 83       	st	Z, r24
 2b8:	40 ee       	ldi	r20, 0xE0	; 224
 2ba:	60 e8       	ldi	r22, 0x80	; 128
 2bc:	8f e0       	ldi	r24, 0x0F	; 15
 2be:	d0 df       	rcall	.-96     	; 0x260 <MCP2515_bit_modify>
 2c0:	64 e0       	ldi	r22, 0x04	; 4
 2c2:	8a e2       	ldi	r24, 0x2A	; 42
 2c4:	a6 df       	rcall	.-180    	; 0x212 <MCP2515_reg_write>
 2c6:	6a ec       	ldi	r22, 0xCA	; 202
 2c8:	89 e2       	ldi	r24, 0x29	; 41
 2ca:	a3 df       	rcall	.-186    	; 0x212 <MCP2515_reg_write>
 2cc:	61 e0       	ldi	r22, 0x01	; 1
 2ce:	88 e2       	ldi	r24, 0x28	; 40
 2d0:	a0 df       	rcall	.-192    	; 0x212 <MCP2515_reg_write>
 2d2:	63 e0       	ldi	r22, 0x03	; 3
 2d4:	8b e2       	ldi	r24, 0x2B	; 43
 2d6:	9d df       	rcall	.-198    	; 0x212 <MCP2515_reg_write>
 2d8:	61 e0       	ldi	r22, 0x01	; 1
 2da:	8d e0       	ldi	r24, 0x0D	; 13
 2dc:	9a df       	rcall	.-204    	; 0x212 <MCP2515_reg_write>
 2de:	40 ee       	ldi	r20, 0xE0	; 224
 2e0:	60 e0       	ldi	r22, 0x00	; 0
 2e2:	8f e0       	ldi	r24, 0x0F	; 15
 2e4:	bd cf       	rjmp	.-134    	; 0x260 <MCP2515_bit_modify>
 2e6:	08 95       	ret

000002e8 <MCP2515_reg_read>:
 2e8:	1f 93       	push	r17
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
 2ee:	18 2f       	mov	r17, r24
 2f0:	c4 e4       	ldi	r28, 0x44	; 68
 2f2:	d6 e0       	ldi	r29, 0x06	; 6
 2f4:	98 81       	ld	r25, Y
 2f6:	9f 7e       	andi	r25, 0xEF	; 239
 2f8:	98 83       	st	Y, r25
 2fa:	83 e0       	ldi	r24, 0x03	; 3
 2fc:	f8 d0       	rcall	.+496    	; 0x4ee <SPI_send_byte>
 2fe:	81 2f       	mov	r24, r17
 300:	f6 d0       	rcall	.+492    	; 0x4ee <SPI_send_byte>
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	f4 d0       	rcall	.+488    	; 0x4ee <SPI_send_byte>
 306:	98 81       	ld	r25, Y
 308:	90 61       	ori	r25, 0x10	; 16
 30a:	98 83       	st	Y, r25
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	1f 91       	pop	r17
 312:	08 95       	ret

00000314 <MCP2515_findFreeTxBuffer>:
 314:	80 e3       	ldi	r24, 0x30	; 48
 316:	e8 df       	rcall	.-48     	; 0x2e8 <MCP2515_reg_read>
 318:	83 ff       	sbrs	r24, 3
 31a:	0a c0       	rjmp	.+20     	; 0x330 <MCP2515_findFreeTxBuffer+0x1c>
 31c:	80 e4       	ldi	r24, 0x40	; 64
 31e:	e4 df       	rcall	.-56     	; 0x2e8 <MCP2515_reg_read>
 320:	83 ff       	sbrs	r24, 3
 322:	08 c0       	rjmp	.+16     	; 0x334 <MCP2515_findFreeTxBuffer+0x20>
 324:	80 e5       	ldi	r24, 0x50	; 80
 326:	e0 df       	rcall	.-64     	; 0x2e8 <MCP2515_reg_read>
 328:	83 ff       	sbrs	r24, 3
 32a:	06 c0       	rjmp	.+12     	; 0x338 <MCP2515_findFreeTxBuffer+0x24>
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	08 95       	ret
 330:	80 e3       	ldi	r24, 0x30	; 48
 332:	08 95       	ret
 334:	80 e4       	ldi	r24, 0x40	; 64
 336:	08 95       	ret
 338:	80 e5       	ldi	r24, 0x50	; 80
 33a:	08 95       	ret

0000033c <MCP2515_TX>:

void MCP2515_TX(int8_t mob, uint8_t numBytes, uint8_t * data, uint32_t ID)
{
 33c:	8f 92       	push	r8
 33e:	9f 92       	push	r9
 340:	af 92       	push	r10
 342:	bf 92       	push	r11
 344:	cf 92       	push	r12
 346:	df 92       	push	r13
 348:	ef 92       	push	r14
 34a:	ff 92       	push	r15
 34c:	0f 93       	push	r16
 34e:	1f 93       	push	r17
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
 354:	d8 2f       	mov	r29, r24
 356:	f6 2e       	mov	r15, r22
 358:	6a 01       	movw	r12, r20
 35a:	48 01       	movw	r8, r16
 35c:	59 01       	movw	r10, r18
	if(mob == 0)return;						//no free mob or invalid mob
 35e:	88 23       	and	r24, r24
 360:	09 f4       	brne	.+2      	; 0x364 <MCP2515_TX+0x28>
 362:	57 c0       	rjmp	.+174    	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
	MCP2515_reg_write(mob, 0x03);			//we shall set this to the highest priority so that it sends it immediately.
 364:	63 e0       	ldi	r22, 0x03	; 3
 366:	55 df       	rcall	.-342    	; 0x212 <MCP2515_reg_write>
	MCP2515_reg_write(mob+1, (ID>>21) & 0xFF);	//shift the ID data to fill the respective MCP registers
 368:	c5 01       	movw	r24, r10
 36a:	b4 01       	movw	r22, r8
 36c:	05 2e       	mov	r0, r21
 36e:	55 e1       	ldi	r21, 0x15	; 21
 370:	96 95       	lsr	r25
 372:	87 95       	ror	r24
 374:	77 95       	ror	r23
 376:	67 95       	ror	r22
 378:	5a 95       	dec	r21
 37a:	d1 f7       	brne	.-12     	; 0x370 <MCP2515_TX+0x34>
 37c:	50 2d       	mov	r21, r0
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	8d 0f       	add	r24, r29
 382:	47 df       	rcall	.-370    	; 0x212 <MCP2515_reg_write>
	MCP2515_reg_write(mob+2, (((ID>>13) & 224)| ((ID>>16) & 3) | ((1<<3) & 0xFF)));	//set the EXIDE bit, which makes it extended (CAN 2.0B)
 384:	d5 01       	movw	r26, r10
 386:	c4 01       	movw	r24, r8
 388:	07 2e       	mov	r0, r23
 38a:	7d e0       	ldi	r23, 0x0D	; 13
 38c:	b6 95       	lsr	r27
 38e:	a7 95       	ror	r26
 390:	97 95       	ror	r25
 392:	87 95       	ror	r24
 394:	7a 95       	dec	r23
 396:	d1 f7       	brne	.-12     	; 0x38c <MCP2515_TX+0x50>
 398:	70 2d       	mov	r23, r0
 39a:	68 2f       	mov	r22, r24
 39c:	60 7e       	andi	r22, 0xE0	; 224
 39e:	8a 2d       	mov	r24, r10
 3a0:	83 70       	andi	r24, 0x03	; 3
 3a2:	68 2b       	or	r22, r24
 3a4:	68 60       	ori	r22, 0x08	; 8
 3a6:	82 e0       	ldi	r24, 0x02	; 2
 3a8:	8d 0f       	add	r24, r29
 3aa:	33 df       	rcall	.-410    	; 0x212 <MCP2515_reg_write>
	MCP2515_reg_write(mob+3, (ID>>8) & 0xFF );
 3ac:	99 27       	eor	r25, r25
 3ae:	8b 2d       	mov	r24, r11
 3b0:	7a 2d       	mov	r23, r10
 3b2:	69 2d       	mov	r22, r9
 3b4:	83 e0       	ldi	r24, 0x03	; 3
 3b6:	8d 0f       	add	r24, r29
 3b8:	2c df       	rcall	.-424    	; 0x212 <MCP2515_reg_write>
	MCP2515_reg_write(mob+4, ID & 0xFF );
 3ba:	68 2d       	mov	r22, r8
 3bc:	84 e0       	ldi	r24, 0x04	; 4
 3be:	8d 0f       	add	r24, r29
 3c0:	28 df       	rcall	.-432    	; 0x212 <MCP2515_reg_write>
	MCP2515_reg_write(mob+5, numBytes);		//set how many bytes we wish to send
 3c2:	6f 2d       	mov	r22, r15
 3c4:	85 e0       	ldi	r24, 0x05	; 5
 3c6:	8d 0f       	add	r24, r29
 3c8:	24 df       	rcall	.-440    	; 0x212 <MCP2515_reg_write>
	//MCP2515_reg_write(mob+2, (1<<3));
	//MCP2515_reg_write(mob+3, 0);
	//MCP2515_reg_write(mob+4, 0);
	//MCP2515_reg_write(mob+5, 0);
	
	for (uint8_t byteCount = 0; byteCount < numBytes; byteCount++)
 3ca:	ff 20       	and	r15, r15
 3cc:	a1 f0       	breq	.+40     	; 0x3f6 <MCP2515_TX+0xba>
 3ce:	86 01       	movw	r16, r12
 3d0:	c6 e0       	ldi	r28, 0x06	; 6
 3d2:	cd 0f       	add	r28, r29
 3d4:	fa 94       	dec	r15
 3d6:	ef 2c       	mov	r14, r15
 3d8:	f1 2c       	mov	r15, r1
 3da:	8f ef       	ldi	r24, 0xFF	; 255
 3dc:	e8 1a       	sub	r14, r24
 3de:	f8 0a       	sbc	r15, r24
 3e0:	ec 0c       	add	r14, r12
 3e2:	fd 1c       	adc	r15, r13
	{
		MCP2515_reg_write(mob+6+byteCount, *(data+byteCount));	//fill the data bytes register.
 3e4:	f8 01       	movw	r30, r16
 3e6:	61 91       	ld	r22, Z+
 3e8:	8f 01       	movw	r16, r30
 3ea:	8c 2f       	mov	r24, r28
 3ec:	12 df       	rcall	.-476    	; 0x212 <MCP2515_reg_write>
 3ee:	cf 5f       	subi	r28, 0xFF	; 255
	//MCP2515_reg_write(mob+2, (1<<3));
	//MCP2515_reg_write(mob+3, 0);
	//MCP2515_reg_write(mob+4, 0);
	//MCP2515_reg_write(mob+5, 0);
	
	for (uint8_t byteCount = 0; byteCount < numBytes; byteCount++)
 3f0:	0e 15       	cp	r16, r14
 3f2:	1f 05       	cpc	r17, r15
 3f4:	b9 f7       	brne	.-18     	; 0x3e4 <MCP2515_TX+0xa8>
	{
		MCP2515_reg_write(mob+6+byteCount, *(data+byteCount));	//fill the data bytes register.
	}
	MCP2515_instruction(128|(1<<((mob>>4) - 3)));		//creates an instruction that matches the mob that is chosen.
 3f6:	d5 95       	asr	r29
 3f8:	d5 95       	asr	r29
 3fa:	d5 95       	asr	r29
 3fc:	d5 95       	asr	r29
 3fe:	d3 50       	subi	r29, 0x03	; 3
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	02 c0       	rjmp	.+4      	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	da 95       	dec	r29
 40c:	e2 f7       	brpl	.-8      	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
 40e:	80 68       	ori	r24, 0x80	; 128
 410:	19 df       	rcall	.-462    	; 0x244 <MCP2515_instruction>
	//PORTC &= ~(1<<PINC7);		//Drop the TX
	//_delay_us(50);
	//PORTC |= (1<<PINC7);		
}
 412:	df 91       	pop	r29
 414:	cf 91       	pop	r28
 416:	1f 91       	pop	r17
 418:	0f 91       	pop	r16
 41a:	ff 90       	pop	r15
 41c:	ef 90       	pop	r14
 41e:	df 90       	pop	r13
 420:	cf 90       	pop	r12
 422:	bf 90       	pop	r11
 424:	af 90       	pop	r10
 426:	9f 90       	pop	r9
 428:	8f 90       	pop	r8
 42a:	08 95       	ret

0000042c <clock_init>:
void clock_init()
{
	//CCP = CCP_IOREG_gc;						// disable register security for clock update
	//CLK.CTRL = CLK_SCLKSEL_RC32M_gc;			// switch clock source to the PLL
	// Configure clock to 32MHz
	OSC.CTRL |= OSC_RC32MEN_bm | OSC_RC32KEN_bm;  /* Enable the internal 32MHz & 32KHz oscillators */
 42c:	e0 e5       	ldi	r30, 0x50	; 80
 42e:	f0 e0       	ldi	r31, 0x00	; 0
 430:	80 81       	ld	r24, Z
 432:	86 60       	ori	r24, 0x06	; 6
 434:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32KRDY_bm));       /* Wait for 32Khz oscillator to stabilize */
 436:	81 81       	ldd	r24, Z+1	; 0x01
 438:	82 ff       	sbrs	r24, 2
 43a:	fd cf       	rjmp	.-6      	; 0x436 <clock_init+0xa>
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));       /* Wait for 32MHz oscillator to stabilize */
 43c:	e0 e5       	ldi	r30, 0x50	; 80
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	81 81       	ldd	r24, Z+1	; 0x01
 442:	81 ff       	sbrs	r24, 1
 444:	fd cf       	rjmp	.-6      	; 0x440 <clock_init+0x14>
	DFLLRC32M.CTRL = DFLL_ENABLE_bm ;             /* Enable DFLL - defaults to calibrate against internal 32Khz clock */
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
	CCP = CCP_IOREG_gc;                           /* Disable register security for clock update */
 44c:	98 ed       	ldi	r25, 0xD8	; 216
 44e:	94 bf       	out	0x34, r25	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;              /* Switch to 32MHz clock */
 450:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
	OSC.CTRL &= ~OSC_RC2MEN_bm;                   /* Disable 2Mhz oscillator */
 454:	e0 e5       	ldi	r30, 0x50	; 80
 456:	f0 e0       	ldi	r31, 0x00	; 0
 458:	80 81       	ld	r24, Z
 45a:	8e 7f       	andi	r24, 0xFE	; 254
 45c:	80 83       	st	Z, r24
 45e:	08 95       	ret

00000460 <LED_toggle>:
}

void LED_toggle()
{
	PORTK_OUT ^= PIN3_bm|PIN2_bm|PIN1_bm;
 460:	e4 e2       	ldi	r30, 0x24	; 36
 462:	f7 e0       	ldi	r31, 0x07	; 7
 464:	90 81       	ld	r25, Z
 466:	8e e0       	ldi	r24, 0x0E	; 14
 468:	89 27       	eor	r24, r25
 46a:	80 83       	st	Z, r24
 46c:	08 95       	ret

0000046e <main>:
}

int main(void)
{
 46e:	cf 93       	push	r28
 470:	df 93       	push	r29
 472:	1f 92       	push	r1
 474:	cd b7       	in	r28, 0x3d	; 61
 476:	de b7       	in	r29, 0x3e	; 62
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 478:	2f ef       	ldi	r18, 0xFF	; 255
 47a:	89 ef       	ldi	r24, 0xF9	; 249
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	21 50       	subi	r18, 0x01	; 1
 480:	80 40       	sbci	r24, 0x00	; 0
 482:	90 40       	sbci	r25, 0x00	; 0
 484:	e1 f7       	brne	.-8      	; 0x47e <main+0x10>
 486:	00 c0       	rjmp	.+0      	; 0x488 <main+0x1a>
 488:	00 00       	nop
	_delay_ms(10);
	clock_init();
 48a:	d0 df       	rcall	.-96     	; 0x42c <clock_init>
	//PORTC_DIRCLR = (1<<PIN6_bp);
	PORTC_DIR = (1<<PIN2_bp)|(1<<PIN1_bp)|(1<<PIN0_bp)|(1<<PIN3_bp)|(1<<PIN4_bp)|(1<<PIN5_bp)|(1<<PIN7_bp);
 48c:	8f eb       	ldi	r24, 0xBF	; 191
 48e:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
	PORTC_OUT |= 0b00001111;
 492:	e4 e4       	ldi	r30, 0x44	; 68
 494:	f6 e0       	ldi	r31, 0x06	; 6
 496:	80 81       	ld	r24, Z
 498:	8f 60       	ori	r24, 0x0F	; 15
 49a:	80 83       	st	Z, r24
	PORTK_DIR |= PIN3_bm|PIN2_bm|PIN1_bm;	//1,2,3 are for LEDs
 49c:	e0 e2       	ldi	r30, 0x20	; 32
 49e:	f7 e0       	ldi	r31, 0x07	; 7
 4a0:	80 81       	ld	r24, Z
 4a2:	8e 60       	ori	r24, 0x0E	; 14
 4a4:	80 83       	st	Z, r24
	
	SPI_init();
 4a6:	1c d0       	rcall	.+56     	; 0x4e0 <SPI_init>
	//spi_send_byte(&MCP2515_SPI, 5);
	
	//PMIC.CTRL |= PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm | PMIC_LOLVLEN_bm;	//turn on all level of interrupts
	//sei();
	//_delay_ms(200);
	MCP2515_init();
 4a8:	f9 de       	rcall	.-526    	; 0x29c <MCP2515_init>
	MCP2515_reg_write(MCP2515_CANINTF, 0b00011100);
 4aa:	6c e1       	ldi	r22, 0x1C	; 28
 4ac:	8c e2       	ldi	r24, 0x2C	; 44
 4ae:	b1 de       	rcall	.-670    	; 0x212 <MCP2515_reg_write>
	//uint8_t data = 0b10101010; 
	uint8_t free_buffer = 0x00;
 4b0:	19 82       	std	Y+1, r1	; 0x01
 4b2:	2f ef       	ldi	r18, 0xFF	; 255
 4b4:	83 ec       	ldi	r24, 0xC3	; 195
 4b6:	99 e0       	ldi	r25, 0x09	; 9
 4b8:	21 50       	subi	r18, 0x01	; 1
 4ba:	80 40       	sbci	r24, 0x00	; 0
 4bc:	90 40       	sbci	r25, 0x00	; 0
 4be:	e1 f7       	brne	.-8      	; 0x4b8 <main+0x4a>
 4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <main+0x54>
 4c2:	00 00       	nop
		//MCP2515_reg_read(MCP2515_CANCTRL);
		_delay_ms(100);

		//MCP2515_receive_status();

		free_buffer = MCP2515_findFreeTxBuffer();
 4c4:	27 df       	rcall	.-434    	; 0x314 <MCP2515_findFreeTxBuffer>
 4c6:	89 83       	std	Y+1, r24	; 0x01
        if(free_buffer)
 4c8:	88 23       	and	r24, r24
 4ca:	99 f3       	breq	.-26     	; 0x4b2 <main+0x44>
		{
			//LED_toggle();
			MCP2515_TX(free_buffer,0,&free_buffer, 0x20 );
 4cc:	00 e2       	ldi	r16, 0x20	; 32
 4ce:	10 e0       	ldi	r17, 0x00	; 0
 4d0:	20 e0       	ldi	r18, 0x00	; 0
 4d2:	30 e0       	ldi	r19, 0x00	; 0
 4d4:	ae 01       	movw	r20, r28
 4d6:	4f 5f       	subi	r20, 0xFF	; 255
 4d8:	5f 4f       	sbci	r21, 0xFF	; 255
 4da:	60 e0       	ldi	r22, 0x00	; 0
 4dc:	2f df       	rcall	.-418    	; 0x33c <MCP2515_TX>
 4de:	e9 cf       	rjmp	.-46     	; 0x4b2 <main+0x44>

000004e0 <SPI_init>:
#include "SPI.h"

void SPI_init()
{
	SPIC.CTRL = (1<<SPI_ENABLE_bp)|SPI_PRESCALER_DIV64_gc|(1<<SPI_MASTER_bp)|SPI_MODE_0_gc;	//enable SPI with ENABLE, MSB first, master mode, reads on leading edge, speed fosc/128 (due to 2x speed not set).
 4e0:	e0 ec       	ldi	r30, 0xC0	; 192
 4e2:	f8 e0       	ldi	r31, 0x08	; 8
 4e4:	82 e5       	ldi	r24, 0x52	; 82
 4e6:	80 83       	st	Z, r24
	SPIC.DATA = 0x00;	//ensure the data register has nothing in it.
 4e8:	13 82       	std	Z+3, r1	; 0x03
	SPIC.INTCTRL = 0x00;
 4ea:	11 82       	std	Z+1, r1	; 0x01
 4ec:	08 95       	ret

000004ee <SPI_send_byte>:
	//SPSR = (1<<SPI2X);	//set whether we want 2x speed or not (1=2x speed).
	//SPDR = 0x00;		//ensure data register has nothing in it
}

uint8_t SPI_send_byte(uint8_t c )
{
 4ee:	cf 93       	push	r28
 4f0:	df 93       	push	r29
	SPIC_DATA = c;					//write data to the transmission register. Writing to this initiates transmission.
 4f2:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while((SPIC_STATUS & (1<<SPI_IF_bp))==0)LED_toggle();		//wait for send to complete
 4f6:	80 91 c2 08 	lds	r24, 0x08C2	; 0x8008c2 <__TEXT_REGION_LENGTH__+0x7008c2>
 4fa:	88 23       	and	r24, r24
 4fc:	34 f0       	brlt	.+12     	; 0x50a <SPI_send_byte+0x1c>
 4fe:	c2 ec       	ldi	r28, 0xC2	; 194
 500:	d8 e0       	ldi	r29, 0x08	; 8
 502:	ae df       	rcall	.-164    	; 0x460 <LED_toggle>
 504:	88 81       	ld	r24, Y
 506:	88 23       	and	r24, r24
 508:	e4 f7       	brge	.-8      	; 0x502 <SPI_send_byte+0x14>
	return SPIC_DATA;				//return any data that was shifted into this register upon transmission.
 50a:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 50e:	df 91       	pop	r29
 510:	cf 91       	pop	r28
 512:	08 95       	ret

00000514 <_exit>:
 514:	f8 94       	cli

00000516 <__stop_program>:
 516:	ff cf       	rjmp	.-2      	; 0x516 <__stop_program>
