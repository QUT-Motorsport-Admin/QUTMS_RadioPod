
radioPod_test1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000696  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00000696  0000072a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000040e  00802000  00802000  0000072a  2**0
                  ALLOC
  3 .stab         00000714  00000000  00000000  0000072c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000ed7  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000c8  00000000  00000000  00000f06  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000f65  00000000  00000000  00000fce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000528  00000000  00000000  00001f33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000081f  00000000  00000000  0000245b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000288  00000000  00000000  00002c7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000006d6  00000000  00000000  00002f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000079f  00000000  00000000  000035da  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000b0  00000000  00000000  00003d79  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	11 c1       	rjmp	.+546    	; 0x228 <__bad_interrupt>
   6:	00 00       	nop
   8:	0f c1       	rjmp	.+542    	; 0x228 <__bad_interrupt>
   a:	00 00       	nop
   c:	0d c1       	rjmp	.+538    	; 0x228 <__bad_interrupt>
   e:	00 00       	nop
  10:	0b c1       	rjmp	.+534    	; 0x228 <__bad_interrupt>
  12:	00 00       	nop
  14:	09 c1       	rjmp	.+530    	; 0x228 <__bad_interrupt>
  16:	00 00       	nop
  18:	07 c1       	rjmp	.+526    	; 0x228 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	05 c1       	rjmp	.+522    	; 0x228 <__bad_interrupt>
  1e:	00 00       	nop
  20:	03 c1       	rjmp	.+518    	; 0x228 <__bad_interrupt>
  22:	00 00       	nop
  24:	01 c1       	rjmp	.+514    	; 0x228 <__bad_interrupt>
  26:	00 00       	nop
  28:	ff c0       	rjmp	.+510    	; 0x228 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	fd c0       	rjmp	.+506    	; 0x228 <__bad_interrupt>
  2e:	00 00       	nop
  30:	fb c0       	rjmp	.+502    	; 0x228 <__bad_interrupt>
  32:	00 00       	nop
  34:	f9 c0       	rjmp	.+498    	; 0x228 <__bad_interrupt>
  36:	00 00       	nop
  38:	f7 c0       	rjmp	.+494    	; 0x228 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	f5 c0       	rjmp	.+490    	; 0x228 <__bad_interrupt>
  3e:	00 00       	nop
  40:	f3 c0       	rjmp	.+486    	; 0x228 <__bad_interrupt>
  42:	00 00       	nop
  44:	f1 c0       	rjmp	.+482    	; 0x228 <__bad_interrupt>
  46:	00 00       	nop
  48:	ef c0       	rjmp	.+478    	; 0x228 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	ed c0       	rjmp	.+474    	; 0x228 <__bad_interrupt>
  4e:	00 00       	nop
  50:	eb c0       	rjmp	.+470    	; 0x228 <__bad_interrupt>
  52:	00 00       	nop
  54:	e9 c0       	rjmp	.+466    	; 0x228 <__bad_interrupt>
  56:	00 00       	nop
  58:	e7 c0       	rjmp	.+462    	; 0x228 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	e5 c0       	rjmp	.+458    	; 0x228 <__bad_interrupt>
  5e:	00 00       	nop
  60:	e3 c0       	rjmp	.+454    	; 0x228 <__bad_interrupt>
  62:	00 00       	nop
  64:	e1 c0       	rjmp	.+450    	; 0x228 <__bad_interrupt>
  66:	00 00       	nop
  68:	df c0       	rjmp	.+446    	; 0x228 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	dd c0       	rjmp	.+442    	; 0x228 <__bad_interrupt>
  6e:	00 00       	nop
  70:	db c0       	rjmp	.+438    	; 0x228 <__bad_interrupt>
  72:	00 00       	nop
  74:	d9 c0       	rjmp	.+434    	; 0x228 <__bad_interrupt>
  76:	00 00       	nop
  78:	d7 c0       	rjmp	.+430    	; 0x228 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	d5 c0       	rjmp	.+426    	; 0x228 <__bad_interrupt>
  7e:	00 00       	nop
  80:	d3 c0       	rjmp	.+422    	; 0x228 <__bad_interrupt>
  82:	00 00       	nop
  84:	d1 c0       	rjmp	.+418    	; 0x228 <__bad_interrupt>
  86:	00 00       	nop
  88:	cf c0       	rjmp	.+414    	; 0x228 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	cd c0       	rjmp	.+410    	; 0x228 <__bad_interrupt>
  8e:	00 00       	nop
  90:	cb c0       	rjmp	.+406    	; 0x228 <__bad_interrupt>
  92:	00 00       	nop
  94:	c9 c0       	rjmp	.+402    	; 0x228 <__bad_interrupt>
  96:	00 00       	nop
  98:	c7 c0       	rjmp	.+398    	; 0x228 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	c5 c0       	rjmp	.+394    	; 0x228 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	c3 c0       	rjmp	.+390    	; 0x228 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	c1 c0       	rjmp	.+386    	; 0x228 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	bf c0       	rjmp	.+382    	; 0x228 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	bd c0       	rjmp	.+378    	; 0x228 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	bb c0       	rjmp	.+374    	; 0x228 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	b9 c0       	rjmp	.+370    	; 0x228 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	b7 c0       	rjmp	.+366    	; 0x228 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	b5 c0       	rjmp	.+362    	; 0x228 <__bad_interrupt>
  be:	00 00       	nop
  c0:	b3 c0       	rjmp	.+358    	; 0x228 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	b1 c0       	rjmp	.+354    	; 0x228 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	af c0       	rjmp	.+350    	; 0x228 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	ad c0       	rjmp	.+346    	; 0x228 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	ab c0       	rjmp	.+342    	; 0x228 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	a9 c0       	rjmp	.+338    	; 0x228 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	a7 c0       	rjmp	.+334    	; 0x228 <__bad_interrupt>
  da:	00 00       	nop
  dc:	a5 c0       	rjmp	.+330    	; 0x228 <__bad_interrupt>
  de:	00 00       	nop
  e0:	a3 c0       	rjmp	.+326    	; 0x228 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	a1 c0       	rjmp	.+322    	; 0x228 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	9f c0       	rjmp	.+318    	; 0x228 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	9d c0       	rjmp	.+314    	; 0x228 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	9b c0       	rjmp	.+310    	; 0x228 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	99 c0       	rjmp	.+306    	; 0x228 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	97 c0       	rjmp	.+302    	; 0x228 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	95 c0       	rjmp	.+298    	; 0x228 <__bad_interrupt>
  fe:	00 00       	nop
 100:	93 c0       	rjmp	.+294    	; 0x228 <__bad_interrupt>
 102:	00 00       	nop
 104:	91 c0       	rjmp	.+290    	; 0x228 <__bad_interrupt>
 106:	00 00       	nop
 108:	8f c0       	rjmp	.+286    	; 0x228 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	8d c0       	rjmp	.+282    	; 0x228 <__bad_interrupt>
 10e:	00 00       	nop
 110:	8b c0       	rjmp	.+278    	; 0x228 <__bad_interrupt>
 112:	00 00       	nop
 114:	89 c0       	rjmp	.+274    	; 0x228 <__bad_interrupt>
 116:	00 00       	nop
 118:	87 c0       	rjmp	.+270    	; 0x228 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	85 c0       	rjmp	.+266    	; 0x228 <__bad_interrupt>
 11e:	00 00       	nop
 120:	83 c0       	rjmp	.+262    	; 0x228 <__bad_interrupt>
 122:	00 00       	nop
 124:	81 c0       	rjmp	.+258    	; 0x228 <__bad_interrupt>
 126:	00 00       	nop
 128:	7f c0       	rjmp	.+254    	; 0x228 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	7d c0       	rjmp	.+250    	; 0x228 <__bad_interrupt>
 12e:	00 00       	nop
 130:	7b c0       	rjmp	.+246    	; 0x228 <__bad_interrupt>
 132:	00 00       	nop
 134:	79 c0       	rjmp	.+242    	; 0x228 <__bad_interrupt>
 136:	00 00       	nop
 138:	77 c0       	rjmp	.+238    	; 0x228 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	75 c0       	rjmp	.+234    	; 0x228 <__bad_interrupt>
 13e:	00 00       	nop
 140:	73 c0       	rjmp	.+230    	; 0x228 <__bad_interrupt>
 142:	00 00       	nop
 144:	71 c0       	rjmp	.+226    	; 0x228 <__bad_interrupt>
 146:	00 00       	nop
 148:	6f c0       	rjmp	.+222    	; 0x228 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	6d c0       	rjmp	.+218    	; 0x228 <__bad_interrupt>
 14e:	00 00       	nop
 150:	6b c0       	rjmp	.+214    	; 0x228 <__bad_interrupt>
 152:	00 00       	nop
 154:	69 c0       	rjmp	.+210    	; 0x228 <__bad_interrupt>
 156:	00 00       	nop
 158:	67 c0       	rjmp	.+206    	; 0x228 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	65 c0       	rjmp	.+202    	; 0x228 <__bad_interrupt>
 15e:	00 00       	nop
 160:	63 c0       	rjmp	.+198    	; 0x228 <__bad_interrupt>
 162:	00 00       	nop
 164:	61 c0       	rjmp	.+194    	; 0x228 <__bad_interrupt>
 166:	00 00       	nop
 168:	5f c0       	rjmp	.+190    	; 0x228 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	8b c1       	rjmp	.+790    	; 0x484 <__vector_91>
 16e:	00 00       	nop
 170:	bd c1       	rjmp	.+890    	; 0x4ec <__vector_92>
 172:	00 00       	nop
 174:	59 c0       	rjmp	.+178    	; 0x228 <__bad_interrupt>
 176:	00 00       	nop
 178:	57 c0       	rjmp	.+174    	; 0x228 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	55 c0       	rjmp	.+170    	; 0x228 <__bad_interrupt>
 17e:	00 00       	nop
 180:	53 c0       	rjmp	.+166    	; 0x228 <__bad_interrupt>
 182:	00 00       	nop
 184:	51 c0       	rjmp	.+162    	; 0x228 <__bad_interrupt>
 186:	00 00       	nop
 188:	4f c0       	rjmp	.+158    	; 0x228 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	4d c0       	rjmp	.+154    	; 0x228 <__bad_interrupt>
 18e:	00 00       	nop
 190:	4b c0       	rjmp	.+150    	; 0x228 <__bad_interrupt>
 192:	00 00       	nop
 194:	49 c0       	rjmp	.+146    	; 0x228 <__bad_interrupt>
 196:	00 00       	nop
 198:	47 c0       	rjmp	.+142    	; 0x228 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	45 c0       	rjmp	.+138    	; 0x228 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	43 c0       	rjmp	.+134    	; 0x228 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	41 c0       	rjmp	.+130    	; 0x228 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	3f c0       	rjmp	.+126    	; 0x228 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	3d c0       	rjmp	.+122    	; 0x228 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	3b c0       	rjmp	.+118    	; 0x228 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	39 c0       	rjmp	.+114    	; 0x228 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	37 c0       	rjmp	.+110    	; 0x228 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	35 c0       	rjmp	.+106    	; 0x228 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	33 c0       	rjmp	.+102    	; 0x228 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	31 c0       	rjmp	.+98     	; 0x228 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	2f c0       	rjmp	.+94     	; 0x228 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	2d c0       	rjmp	.+90     	; 0x228 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	2b c0       	rjmp	.+86     	; 0x228 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	29 c0       	rjmp	.+82     	; 0x228 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	27 c0       	rjmp	.+78     	; 0x228 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	eb c0       	rjmp	.+470    	; 0x3b4 <__vector_119>
 1de:	00 00       	nop
 1e0:	1d c1       	rjmp	.+570    	; 0x41c <__vector_120>
 1e2:	00 00       	nop
 1e4:	21 c0       	rjmp	.+66     	; 0x228 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	1f c0       	rjmp	.+62     	; 0x228 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	1d c0       	rjmp	.+58     	; 0x228 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	1b c0       	rjmp	.+54     	; 0x228 <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	19 c0       	rjmp	.+50     	; 0x228 <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	17 c0       	rjmp	.+46     	; 0x228 <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	df e3       	ldi	r29, 0x3F	; 63
 204:	de bf       	out	0x3e, r29	; 62
 206:	cd bf       	out	0x3d, r28	; 61
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_clear_bss>:
 214:	24 e2       	ldi	r18, 0x24	; 36
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
 21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
 21e:	ae 30       	cpi	r26, 0x0E	; 14
 220:	b2 07       	cpc	r27, r18
 222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
 224:	b0 d0       	rcall	.+352    	; 0x386 <main>
 226:	35 c2       	rjmp	.+1130   	; 0x692 <_exit>

00000228 <__bad_interrupt>:
 228:	eb ce       	rjmp	.-554    	; 0x0 <__vectors>

0000022a <init>:
USART_data_t GPS_usart_data;			//struct to manage the GPS usart



int init(void)
{
 22a:	1f 93       	push	r17
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
	int error = 128;

	///////////////////////////////////////////////////////////////////////////////////////////////
	//set up clock options
	OSC.XOSCCTRL = 0b11011011;				// set for 16MHz xtal, with longest startup time
 230:	e0 e5       	ldi	r30, 0x50	; 80
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	8b ed       	ldi	r24, 0xDB	; 219
 236:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL |= 8;							// enable the external oscillator
 238:	80 81       	ld	r24, Z
 23a:	88 60       	ori	r24, 0x08	; 8
 23c:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));	// wait for oscillator to be ready
 23e:	81 81       	ldd	r24, Z+1	; 0x01
 240:	83 ff       	sbrs	r24, 3
 242:	fd cf       	rjmp	.-6      	; 0x23e <init+0x14>
	OSC.PLLCTRL =  0b11000010;				// PLL source is external OSC, multiple is 2x (32MHz)
 244:	e0 e5       	ldi	r30, 0x50	; 80
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	82 ec       	ldi	r24, 0xC2	; 194
 24a:	85 83       	std	Z+5, r24	; 0x05
	OSC.CTRL |= 16;							// enable the PLL unit
 24c:	80 81       	ld	r24, Z
 24e:	80 61       	ori	r24, 0x10	; 16
 250:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_PLLRDY_bm));	// wait for PLL unit to stabilise
 252:	81 81       	ldd	r24, Z+1	; 0x01
 254:	84 ff       	sbrs	r24, 4
 256:	fd cf       	rjmp	.-6      	; 0x252 <init+0x28>

	CCP = CCP_IOREG_gc;						// disable register security for clock update
 258:	88 ed       	ldi	r24, 0xD8	; 216
 25a:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_PLL_gc;			// switch clock source to the PLL
 25c:	84 e0       	ldi	r24, 0x04	; 4
 25e:	80 93 40 00 	sts	0x0040, r24


	///////////////////////////////////////////////////////////////////////////////////////////////
	//Set GPIO

	PORTF_DIR |= 9;		//set PORTF pin 3 as output for serial 1 TX and PF) which is the CTS line
 262:	e0 ea       	ldi	r30, 0xA0	; 160
 264:	f6 e0       	ldi	r31, 0x06	; 6
 266:	80 81       	ld	r24, Z
 268:	89 60       	ori	r24, 0x09	; 9
 26a:	80 83       	st	Z, r24
	PORTF_DIR &= ~4;	//set PORTF pin 2 as an input for serial 1 RX
 26c:	80 81       	ld	r24, Z
 26e:	8b 7f       	andi	r24, 0xFB	; 251
 270:	80 83       	st	Z, r24
	
	PORTD_DIR |= 128;	//set PORTD pin 7 as output for serial 2 TX
 272:	e0 e6       	ldi	r30, 0x60	; 96
 274:	f6 e0       	ldi	r31, 0x06	; 6
 276:	80 81       	ld	r24, Z
 278:	80 68       	ori	r24, 0x80	; 128
 27a:	80 83       	st	Z, r24
	PORTD_DIR &= ~64;	//set PORTD pin 6 as an input for serial 2 RX
 27c:	80 81       	ld	r24, Z
 27e:	8f 7b       	andi	r24, 0xBF	; 191
 280:	80 83       	st	Z, r24
	
	PORTF_OUT &= ~1;	//set pin PF0 low so the CTS line is enabled for sending
 282:	e4 ea       	ldi	r30, 0xA4	; 164
 284:	f6 e0       	ldi	r31, 0x06	; 6
 286:	80 81       	ld	r24, Z
 288:	8e 7f       	andi	r24, 0xFE	; 254
 28a:	80 83       	st	Z, r24
	///////////////////////////////////////////////////////////////////////////////////////////////


	///////////////////////////////////////////////////////////////////////////////////////////////
	//configure ADC
	ADCA_CTRLB |= 0b00000000;		//12-bit right hand result mode
 28c:	e1 e0       	ldi	r30, 0x01	; 1
 28e:	f2 e0       	ldi	r31, 0x02	; 2
 290:	80 81       	ld	r24, Z
 292:	80 83       	st	Z, r24
	ADCA_CH0_MUXCTRL |= 0b01010000;	//set the MUX to input 10 position (PIN7 on qfp100)
 294:	e1 e2       	ldi	r30, 0x21	; 33
 296:	f2 e0       	ldi	r31, 0x02	; 2
 298:	80 81       	ld	r24, Z
 29a:	80 65       	ori	r24, 0x50	; 80
 29c:	80 83       	st	Z, r24
	ADCA_CH0_CTRL = 0b00000001;		//single ended conversion on channel A
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	80 93 20 02 	sts	0x0220, r24
	ADCA_REFCTRL |= 0b00110000;		//enable the reference on AREF_B
 2a4:	e2 e0       	ldi	r30, 0x02	; 2
 2a6:	f2 e0       	ldi	r31, 0x02	; 2
 2a8:	80 81       	ld	r24, Z
 2aa:	80 63       	ori	r24, 0x30	; 48
 2ac:	80 83       	st	Z, r24
	ADCA_PRESCALER |= 2;			//turn on /16 mode for ADC clock
 2ae:	e4 e0       	ldi	r30, 0x04	; 4
 2b0:	f2 e0       	ldi	r31, 0x02	; 2
 2b2:	80 81       	ld	r24, Z
 2b4:	82 60       	ori	r24, 0x02	; 2
 2b6:	80 83       	st	Z, r24
	ADCA_CTRLA |= 1;				//enable ADC module A
 2b8:	c0 e0       	ldi	r28, 0x00	; 0
 2ba:	d2 e0       	ldi	r29, 0x02	; 2
 2bc:	88 81       	ld	r24, Y
 2be:	81 60       	ori	r24, 0x01	; 1
 2c0:	88 83       	st	Y, r24


	///////////////////////////////////////////////////////////////////////////////////////////////
	//configure USART for bluetooth
	/* Use USARTF0 and initialize buffers. */
	USART_InterruptDriver_Initialize(&BLUETOOTH_usart_data, &USARTF0, USART_DREINTLVL_LO_gc);
 2c2:	41 e0       	ldi	r20, 0x01	; 1
 2c4:	60 ea       	ldi	r22, 0xA0	; 160
 2c6:	7b e0       	ldi	r23, 0x0B	; 11
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	90 e2       	ldi	r25, 0x20	; 32
 2cc:	43 d1       	rcall	.+646    	; 0x554 <USART_InterruptDriver_Initialize>
	/* USARTF0, 8 Data bits, No Parity, 1 Stop bit. */
	USART_Format_Set(BLUETOOTH_usart_data.usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
 2ce:	e0 91 00 20 	lds	r30, 0x2000
 2d2:	f0 91 01 20 	lds	r31, 0x2001
 2d6:	13 e0       	ldi	r17, 0x03	; 3
 2d8:	15 83       	std	Z+5, r17	; 0x05
	/* Enable RXC interrupt. */
	USART_RxdInterruptLevel_Set(BLUETOOTH_usart_data.usart, USART_RXCINTLVL_LO_gc);
 2da:	83 81       	ldd	r24, Z+3	; 0x03
 2dc:	8f 7c       	andi	r24, 0xCF	; 207
 2de:	80 61       	ori	r24, 0x10	; 16
 2e0:	83 83       	std	Z+3, r24	; 0x03

	USART_Baudrate_Set(&USARTF0, 524 , 11);			//115200, from -5 scale and 524
 2e2:	a0 ea       	ldi	r26, 0xA0	; 160
 2e4:	bb e0       	ldi	r27, 0x0B	; 11
 2e6:	8c e0       	ldi	r24, 0x0C	; 12
 2e8:	16 96       	adiw	r26, 0x06	; 6
 2ea:	8c 93       	st	X, r24
 2ec:	16 97       	sbiw	r26, 0x06	; 6
 2ee:	82 eb       	ldi	r24, 0xB2	; 178
 2f0:	17 96       	adiw	r26, 0x07	; 7
 2f2:	8c 93       	st	X, r24

	/* Enable both RX and TX. */
	USART_Rx_Enable(BLUETOOTH_usart_data.usart);
 2f4:	84 81       	ldd	r24, Z+4	; 0x04
 2f6:	80 61       	ori	r24, 0x10	; 16
 2f8:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(BLUETOOTH_usart_data.usart);
 2fa:	84 81       	ldd	r24, Z+4	; 0x04
 2fc:	88 60       	ori	r24, 0x08	; 8
 2fe:	84 83       	std	Z+4, r24	; 0x04
	
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	//configure USART for GPS
	/* Use USARTD1 and initialize buffers. */
	USART_InterruptDriver_Initialize(&GPS_usart_data, &USARTD1, USART_DREINTLVL_LO_gc);
 300:	41 e0       	ldi	r20, 0x01	; 1
 302:	60 eb       	ldi	r22, 0xB0	; 176
 304:	79 e0       	ldi	r23, 0x09	; 9
 306:	87 e0       	ldi	r24, 0x07	; 7
 308:	92 e2       	ldi	r25, 0x22	; 34
 30a:	24 d1       	rcall	.+584    	; 0x554 <USART_InterruptDriver_Initialize>
	/* USARTD1, 8 Data bits, No Parity, 1 Stop bit. */
	USART_Format_Set(GPS_usart_data.usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
 30c:	e0 91 07 22 	lds	r30, 0x2207
 310:	f0 91 08 22 	lds	r31, 0x2208
 314:	15 83       	std	Z+5, r17	; 0x05
	/* Enable RXC interrupt. */
	USART_RxdInterruptLevel_Set(GPS_usart_data.usart, USART_RXCINTLVL_LO_gc);
 316:	83 81       	ldd	r24, Z+3	; 0x03
 318:	8f 7c       	andi	r24, 0xCF	; 207
 31a:	80 61       	ori	r24, 0x10	; 16
 31c:	83 83       	std	Z+3, r24	; 0x03

	USART_Baudrate_Set(&USARTD1, 207 , 1);			//115200, from -5 scale and 524
 31e:	a0 eb       	ldi	r26, 0xB0	; 176
 320:	b9 e0       	ldi	r27, 0x09	; 9
 322:	8f ec       	ldi	r24, 0xCF	; 207
 324:	16 96       	adiw	r26, 0x06	; 6
 326:	8c 93       	st	X, r24
 328:	16 97       	sbiw	r26, 0x06	; 6
 32a:	80 e1       	ldi	r24, 0x10	; 16
 32c:	17 96       	adiw	r26, 0x07	; 7
 32e:	8c 93       	st	X, r24

	/* Enable both RX and TX. */
	USART_Rx_Enable(GPS_usart_data.usart);
 330:	84 81       	ldd	r24, Z+4	; 0x04
 332:	80 61       	ori	r24, 0x10	; 16
 334:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(GPS_usart_data.usart);
 336:	84 81       	ldd	r24, Z+4	; 0x04
 338:	88 60       	ori	r24, 0x08	; 8
 33a:	84 83       	std	Z+4, r24	; 0x04
	///////////////////////////////////////////////////////////////////////////////////////////////
	
	

	PORTK_DIR |= 14;	//bits 1, 2, 3
 33c:	e0 e2       	ldi	r30, 0x20	; 32
 33e:	f7 e0       	ldi	r31, 0x07	; 7
 340:	80 81       	ld	r24, Z
 342:	8e 60       	ori	r24, 0x0E	; 14
 344:	80 83       	st	Z, r24

	PORTK_OUT |= 2;
 346:	e4 e2       	ldi	r30, 0x24	; 36
 348:	f7 e0       	ldi	r31, 0x07	; 7
 34a:	80 81       	ld	r24, Z
 34c:	82 60       	ori	r24, 0x02	; 2
 34e:	80 83       	st	Z, r24
	
	
	ADCA_CTRLA |= 4;				//START THE FIRST CONVERSION
 350:	88 81       	ld	r24, Y
 352:	84 60       	ori	r24, 0x04	; 4
 354:	88 83       	st	Y, r24
 356:	24 e6       	ldi	r18, 0x64	; 100
 358:	39 e1       	ldi	r19, 0x19	; 25
USART_data_t GPS_usart_data;			//struct to manage the GPS usart



int init(void)
{
 35a:	4a e8       	ldi	r20, 0x8A	; 138
 35c:	52 e0       	ldi	r21, 0x02	; 2
 35e:	05 c0       	rjmp	.+10     	; 0x36a <init+0x140>
 360:	01 97       	sbiw	r24, 0x01	; 1
	
	unsigned int i, j;
	
	for (i = 0; i < 6500; i++)		//delay to let systems settle (approx one second)
	{
		for (j = 0; j < 650; j++);
 362:	f1 f7       	brne	.-4      	; 0x360 <init+0x136>
 364:	21 50       	subi	r18, 0x01	; 1
 366:	31 09       	sbc	r19, r1
	
	ADCA_CTRLA |= 4;				//START THE FIRST CONVERSION
	
	unsigned int i, j;
	
	for (i = 0; i < 6500; i++)		//delay to let systems settle (approx one second)
 368:	11 f0       	breq	.+4      	; 0x36e <init+0x144>
USART_data_t GPS_usart_data;			//struct to manage the GPS usart



int init(void)
{
 36a:	ca 01       	movw	r24, r20
 36c:	f9 cf       	rjmp	.-14     	; 0x360 <init+0x136>
		for (j = 0; j < 650; j++);
	}
	
	/////////////////////////////////////////////
	/* Enable global interrupts. */
	PMIC.CTRL |= PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm | PMIC_LOLVLEN_bm;	//turn on all level of interrupts
 36e:	e0 ea       	ldi	r30, 0xA0	; 160
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	82 81       	ldd	r24, Z+2	; 0x02
 374:	87 60       	ori	r24, 0x07	; 7
 376:	82 83       	std	Z+2, r24	; 0x02
	sei();
 378:	78 94       	sei
	/////////////////////////////////////////////
	
	return error;
 37a:	80 e8       	ldi	r24, 0x80	; 128
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	df 91       	pop	r29
 380:	cf 91       	pop	r28
 382:	1f 91       	pop	r17
 384:	08 95       	ret

00000386 <main>:
USART_data_t BLUETOOTH_usart_data;
USART_data_t GPS_usart_data;

int main(void)
{
	init();
 386:	51 df       	rcall	.-350    	; 0x22a <init>
		
		if(USART_RXBufferData_Available(&GPS_usart_data))
		{
			unsigned char temp_byte =  USART_RXBuffer_GetByte(&GPS_usart_data);
			USART_TXBuffer_PutByte(&BLUETOOTH_usart_data, temp_byte);
			if(temp_byte == '\n') PORTK_OUT ^= 2;
 388:	c4 e2       	ldi	r28, 0x24	; 36
 38a:	d7 e0       	ldi	r29, 0x07	; 7
 38c:	02 e0       	ldi	r16, 0x02	; 2
		PORTK_OUT = 8;
		_delay_ms(333);
		PORTK_OUT = 2;
		*/
		
		if(USART_RXBufferData_Available(&GPS_usart_data))
 38e:	87 e0       	ldi	r24, 0x07	; 7
 390:	92 e2       	ldi	r25, 0x22	; 34
 392:	21 d1       	rcall	.+578    	; 0x5d6 <USART_RXBufferData_Available>
 394:	88 23       	and	r24, r24
 396:	d9 f3       	breq	.-10     	; 0x38e <main+0x8>
		{
			unsigned char temp_byte =  USART_RXBuffer_GetByte(&GPS_usart_data);
 398:	87 e0       	ldi	r24, 0x07	; 7
 39a:	92 e2       	ldi	r25, 0x22	; 34
 39c:	29 d1       	rcall	.+594    	; 0x5f0 <USART_RXBuffer_GetByte>
 39e:	18 2f       	mov	r17, r24
			USART_TXBuffer_PutByte(&BLUETOOTH_usart_data, temp_byte);
 3a0:	68 2f       	mov	r22, r24
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	90 e2       	ldi	r25, 0x20	; 32
 3a6:	f8 d0       	rcall	.+496    	; 0x598 <USART_TXBuffer_PutByte>
			if(temp_byte == '\n') PORTK_OUT ^= 2;
 3a8:	1a 30       	cpi	r17, 0x0A	; 10
 3aa:	89 f7       	brne	.-30     	; 0x38e <main+0x8>
 3ac:	88 81       	ld	r24, Y
 3ae:	80 27       	eor	r24, r16
 3b0:	88 83       	st	Y, r24
 3b2:	ed cf       	rjmp	.-38     	; 0x38e <main+0x8>

000003b4 <__vector_119>:
		}
    }
}

ISR(USARTF0_RXC_vect)		//receive interrupt routine for the bluetooth module
{
 3b4:	1f 92       	push	r1
 3b6:	0f 92       	push	r0
 3b8:	0f b6       	in	r0, 0x3f	; 63
 3ba:	0f 92       	push	r0
 3bc:	11 24       	eor	r1, r1
 3be:	08 b6       	in	r0, 0x38	; 56
 3c0:	0f 92       	push	r0
 3c2:	18 be       	out	0x38, r1	; 56
 3c4:	09 b6       	in	r0, 0x39	; 57
 3c6:	0f 92       	push	r0
 3c8:	19 be       	out	0x39, r1	; 57
 3ca:	0b b6       	in	r0, 0x3b	; 59
 3cc:	0f 92       	push	r0
 3ce:	1b be       	out	0x3b, r1	; 59
 3d0:	2f 93       	push	r18
 3d2:	3f 93       	push	r19
 3d4:	4f 93       	push	r20
 3d6:	5f 93       	push	r21
 3d8:	6f 93       	push	r22
 3da:	7f 93       	push	r23
 3dc:	8f 93       	push	r24
 3de:	9f 93       	push	r25
 3e0:	af 93       	push	r26
 3e2:	bf 93       	push	r27
 3e4:	ef 93       	push	r30
 3e6:	ff 93       	push	r31
	USART_RXComplete(&BLUETOOTH_usart_data);
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	90 e2       	ldi	r25, 0x20	; 32
 3ec:	0e d1       	rcall	.+540    	; 0x60a <USART_RXComplete>
}
 3ee:	ff 91       	pop	r31
 3f0:	ef 91       	pop	r30
 3f2:	bf 91       	pop	r27
 3f4:	af 91       	pop	r26
 3f6:	9f 91       	pop	r25
 3f8:	8f 91       	pop	r24
 3fa:	7f 91       	pop	r23
 3fc:	6f 91       	pop	r22
 3fe:	5f 91       	pop	r21
 400:	4f 91       	pop	r20
 402:	3f 91       	pop	r19
 404:	2f 91       	pop	r18
 406:	0f 90       	pop	r0
 408:	0b be       	out	0x3b, r0	; 59
 40a:	0f 90       	pop	r0
 40c:	09 be       	out	0x39, r0	; 57
 40e:	0f 90       	pop	r0
 410:	08 be       	out	0x38, r0	; 56
 412:	0f 90       	pop	r0
 414:	0f be       	out	0x3f, r0	; 63
 416:	0f 90       	pop	r0
 418:	1f 90       	pop	r1
 41a:	18 95       	reti

0000041c <__vector_120>:

ISR(USARTF0_DRE_vect)		//transmit interrupt routine for the bluetooth module
{
 41c:	1f 92       	push	r1
 41e:	0f 92       	push	r0
 420:	0f b6       	in	r0, 0x3f	; 63
 422:	0f 92       	push	r0
 424:	11 24       	eor	r1, r1
 426:	08 b6       	in	r0, 0x38	; 56
 428:	0f 92       	push	r0
 42a:	18 be       	out	0x38, r1	; 56
 42c:	09 b6       	in	r0, 0x39	; 57
 42e:	0f 92       	push	r0
 430:	19 be       	out	0x39, r1	; 57
 432:	0b b6       	in	r0, 0x3b	; 59
 434:	0f 92       	push	r0
 436:	1b be       	out	0x3b, r1	; 59
 438:	2f 93       	push	r18
 43a:	3f 93       	push	r19
 43c:	4f 93       	push	r20
 43e:	5f 93       	push	r21
 440:	6f 93       	push	r22
 442:	7f 93       	push	r23
 444:	8f 93       	push	r24
 446:	9f 93       	push	r25
 448:	af 93       	push	r26
 44a:	bf 93       	push	r27
 44c:	ef 93       	push	r30
 44e:	ff 93       	push	r31
	USART_DataRegEmpty(&BLUETOOTH_usart_data);
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	90 e2       	ldi	r25, 0x20	; 32
 454:	f7 d0       	rcall	.+494    	; 0x644 <USART_DataRegEmpty>
}
 456:	ff 91       	pop	r31
 458:	ef 91       	pop	r30
 45a:	bf 91       	pop	r27
 45c:	af 91       	pop	r26
 45e:	9f 91       	pop	r25
 460:	8f 91       	pop	r24
 462:	7f 91       	pop	r23
 464:	6f 91       	pop	r22
 466:	5f 91       	pop	r21
 468:	4f 91       	pop	r20
 46a:	3f 91       	pop	r19
 46c:	2f 91       	pop	r18
 46e:	0f 90       	pop	r0
 470:	0b be       	out	0x3b, r0	; 59
 472:	0f 90       	pop	r0
 474:	09 be       	out	0x39, r0	; 57
 476:	0f 90       	pop	r0
 478:	08 be       	out	0x38, r0	; 56
 47a:	0f 90       	pop	r0
 47c:	0f be       	out	0x3f, r0	; 63
 47e:	0f 90       	pop	r0
 480:	1f 90       	pop	r1
 482:	18 95       	reti

00000484 <__vector_91>:

ISR(USARTD1_RXC_vect)		//receive interrupt routine for the GPS module
{
 484:	1f 92       	push	r1
 486:	0f 92       	push	r0
 488:	0f b6       	in	r0, 0x3f	; 63
 48a:	0f 92       	push	r0
 48c:	11 24       	eor	r1, r1
 48e:	08 b6       	in	r0, 0x38	; 56
 490:	0f 92       	push	r0
 492:	18 be       	out	0x38, r1	; 56
 494:	09 b6       	in	r0, 0x39	; 57
 496:	0f 92       	push	r0
 498:	19 be       	out	0x39, r1	; 57
 49a:	0b b6       	in	r0, 0x3b	; 59
 49c:	0f 92       	push	r0
 49e:	1b be       	out	0x3b, r1	; 59
 4a0:	2f 93       	push	r18
 4a2:	3f 93       	push	r19
 4a4:	4f 93       	push	r20
 4a6:	5f 93       	push	r21
 4a8:	6f 93       	push	r22
 4aa:	7f 93       	push	r23
 4ac:	8f 93       	push	r24
 4ae:	9f 93       	push	r25
 4b0:	af 93       	push	r26
 4b2:	bf 93       	push	r27
 4b4:	ef 93       	push	r30
 4b6:	ff 93       	push	r31
	USART_RXComplete(&GPS_usart_data);
 4b8:	87 e0       	ldi	r24, 0x07	; 7
 4ba:	92 e2       	ldi	r25, 0x22	; 34
 4bc:	a6 d0       	rcall	.+332    	; 0x60a <USART_RXComplete>
}
 4be:	ff 91       	pop	r31
 4c0:	ef 91       	pop	r30
 4c2:	bf 91       	pop	r27
 4c4:	af 91       	pop	r26
 4c6:	9f 91       	pop	r25
 4c8:	8f 91       	pop	r24
 4ca:	7f 91       	pop	r23
 4cc:	6f 91       	pop	r22
 4ce:	5f 91       	pop	r21
 4d0:	4f 91       	pop	r20
 4d2:	3f 91       	pop	r19
 4d4:	2f 91       	pop	r18
 4d6:	0f 90       	pop	r0
 4d8:	0b be       	out	0x3b, r0	; 59
 4da:	0f 90       	pop	r0
 4dc:	09 be       	out	0x39, r0	; 57
 4de:	0f 90       	pop	r0
 4e0:	08 be       	out	0x38, r0	; 56
 4e2:	0f 90       	pop	r0
 4e4:	0f be       	out	0x3f, r0	; 63
 4e6:	0f 90       	pop	r0
 4e8:	1f 90       	pop	r1
 4ea:	18 95       	reti

000004ec <__vector_92>:

ISR(USARTD1_DRE_vect)		//transmit interrupt routine for the GPS module
{
 4ec:	1f 92       	push	r1
 4ee:	0f 92       	push	r0
 4f0:	0f b6       	in	r0, 0x3f	; 63
 4f2:	0f 92       	push	r0
 4f4:	11 24       	eor	r1, r1
 4f6:	08 b6       	in	r0, 0x38	; 56
 4f8:	0f 92       	push	r0
 4fa:	18 be       	out	0x38, r1	; 56
 4fc:	09 b6       	in	r0, 0x39	; 57
 4fe:	0f 92       	push	r0
 500:	19 be       	out	0x39, r1	; 57
 502:	0b b6       	in	r0, 0x3b	; 59
 504:	0f 92       	push	r0
 506:	1b be       	out	0x3b, r1	; 59
 508:	2f 93       	push	r18
 50a:	3f 93       	push	r19
 50c:	4f 93       	push	r20
 50e:	5f 93       	push	r21
 510:	6f 93       	push	r22
 512:	7f 93       	push	r23
 514:	8f 93       	push	r24
 516:	9f 93       	push	r25
 518:	af 93       	push	r26
 51a:	bf 93       	push	r27
 51c:	ef 93       	push	r30
 51e:	ff 93       	push	r31
	USART_DataRegEmpty(&GPS_usart_data);
 520:	87 e0       	ldi	r24, 0x07	; 7
 522:	92 e2       	ldi	r25, 0x22	; 34
 524:	8f d0       	rcall	.+286    	; 0x644 <USART_DataRegEmpty>
 526:	ff 91       	pop	r31
 528:	ef 91       	pop	r30
 52a:	bf 91       	pop	r27
 52c:	af 91       	pop	r26
 52e:	9f 91       	pop	r25
 530:	8f 91       	pop	r24
 532:	7f 91       	pop	r23
 534:	6f 91       	pop	r22
 536:	5f 91       	pop	r21
 538:	4f 91       	pop	r20
 53a:	3f 91       	pop	r19
 53c:	2f 91       	pop	r18
 53e:	0f 90       	pop	r0
 540:	0b be       	out	0x3b, r0	; 59
 542:	0f 90       	pop	r0
 544:	09 be       	out	0x39, r0	; 57
 546:	0f 90       	pop	r0
 548:	08 be       	out	0x38, r0	; 56
 54a:	0f 90       	pop	r0
 54c:	0f be       	out	0x3f, r0	; 63
 54e:	0f 90       	pop	r0
 550:	1f 90       	pop	r1
 552:	18 95       	reti

00000554 <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel        Interrupt level of the DRE interrupt.
 */
void USART_InterruptDriver_DreInterruptLevel_Set(USART_data_t * usart_data,
                                                 USART_DREINTLVL_t dreIntLevel)
{
	usart_data->dreIntLevel = dreIntLevel;
 554:	fc 01       	movw	r30, r24
 556:	60 83       	st	Z, r22
 558:	71 83       	std	Z+1, r23	; 0x01
 55a:	42 83       	std	Z+2, r20	; 0x02
 55c:	ec 5f       	subi	r30, 0xFC	; 252
 55e:	fd 4f       	sbci	r31, 0xFD	; 253
 560:	10 82       	st	Z, r1
 562:	fc 01       	movw	r30, r24
 564:	ed 5f       	subi	r30, 0xFD	; 253
 566:	fd 4f       	sbci	r31, 0xFD	; 253
 568:	10 82       	st	Z, r1
 56a:	fc 01       	movw	r30, r24
 56c:	ea 5f       	subi	r30, 0xFA	; 250
 56e:	fd 4f       	sbci	r31, 0xFD	; 253
 570:	10 82       	st	Z, r1
 572:	fc 01       	movw	r30, r24
 574:	eb 5f       	subi	r30, 0xFB	; 251
 576:	fd 4f       	sbci	r31, 0xFD	; 253
 578:	10 82       	st	Z, r1
 57a:	08 95       	ret

0000057c <USART_TXBuffer_FreeSpace>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
 57c:	fc 01       	movw	r30, r24
 57e:	eb 5f       	subi	r30, 0xFB	; 251
 580:	fd 4f       	sbci	r31, 0xFD	; 253
 582:	20 81       	ld	r18, Z
	uint8_t tempTail = usart_data->buffer.TX_Tail;
 584:	fc 01       	movw	r30, r24
 586:	ea 5f       	subi	r30, 0xFA	; 250
 588:	fd 4f       	sbci	r31, 0xFD	; 253
 58a:	90 81       	ld	r25, Z
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
 58c:	2f 5f       	subi	r18, 0xFF	; 255
	uint8_t tempTail = usart_data->buffer.TX_Tail;

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	29 13       	cpse	r18, r25
 592:	01 c0       	rjmp	.+2      	; 0x596 <USART_TXBuffer_FreeSpace+0x1a>
 594:	80 e0       	ldi	r24, 0x00	; 0
}
 596:	08 95       	ret

00000598 <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
 598:	1f 93       	push	r17
 59a:	cf 93       	push	r28
 59c:	df 93       	push	r29
 59e:	ec 01       	movw	r28, r24
 5a0:	16 2f       	mov	r17, r22
	uint8_t tempTX_Head;
	bool TXBuffer_FreeSpace;
	USART_Buffer_t * TXbufPtr;

	TXbufPtr = &usart_data->buffer;
	TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);
 5a2:	ec df       	rcall	.-40     	; 0x57c <USART_TXBuffer_FreeSpace>


	if(TXBuffer_FreeSpace)
 5a4:	88 23       	and	r24, r24
 5a6:	99 f0       	breq	.+38     	; 0x5ce <USART_TXBuffer_PutByte+0x36>
	{
	  	tempTX_Head = TXbufPtr->TX_Head;
 5a8:	fe 01       	movw	r30, r28
 5aa:	eb 5f       	subi	r30, 0xFB	; 251
 5ac:	fd 4f       	sbci	r31, 0xFD	; 253
 5ae:	90 81       	ld	r25, Z
	  	TXbufPtr->TX[tempTX_Head]= data;
 5b0:	de 01       	movw	r26, r28
 5b2:	a9 0f       	add	r26, r25
 5b4:	b1 1d       	adc	r27, r1
 5b6:	ad 5f       	subi	r26, 0xFD	; 253
 5b8:	be 4f       	sbci	r27, 0xFE	; 254
 5ba:	1c 93       	st	X, r17
		/* Advance buffer head. */
		TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
 5bc:	9f 5f       	subi	r25, 0xFF	; 255
 5be:	90 83       	st	Z, r25

		/* Enable DRE interrupt. */
		tempCTRLA = usart_data->usart->CTRLA;
 5c0:	e8 81       	ld	r30, Y
 5c2:	f9 81       	ldd	r31, Y+1	; 0x01
 5c4:	93 81       	ldd	r25, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
 5c6:	9c 7f       	andi	r25, 0xFC	; 252
 5c8:	2a 81       	ldd	r18, Y+2	; 0x02
 5ca:	92 2b       	or	r25, r18
		usart_data->usart->CTRLA = tempCTRLA;
 5cc:	93 83       	std	Z+3, r25	; 0x03
	}
	return TXBuffer_FreeSpace;
}
 5ce:	df 91       	pop	r29
 5d0:	cf 91       	pop	r28
 5d2:	1f 91       	pop	r17
 5d4:	08 95       	ret

000005d6 <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
 5d6:	fc 01       	movw	r30, r24
 5d8:	ed 5f       	subi	r30, 0xFD	; 253
 5da:	fd 4f       	sbci	r31, 0xFD	; 253
 5dc:	20 81       	ld	r18, Z
	uint8_t tempTail = usart_data->buffer.RX_Tail;
 5de:	fc 01       	movw	r30, r24
 5e0:	ec 5f       	subi	r30, 0xFC	; 252
 5e2:	fd 4f       	sbci	r31, 0xFD	; 253
 5e4:	90 81       	ld	r25, Z

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	29 13       	cpse	r18, r25
 5ea:	01 c0       	rjmp	.+2      	; 0x5ee <USART_RXBufferData_Available+0x18>
 5ec:	80 e0       	ldi	r24, 0x00	; 0
}
 5ee:	08 95       	ret

000005f0 <USART_RXBuffer_GetByte>:
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
 5f0:	fc 01       	movw	r30, r24
 5f2:	ec 5f       	subi	r30, 0xFC	; 252
 5f4:	fd 4f       	sbci	r31, 0xFD	; 253
 5f6:	20 81       	ld	r18, Z
 5f8:	dc 01       	movw	r26, r24
 5fa:	a2 0f       	add	r26, r18
 5fc:	b1 1d       	adc	r27, r1
 5fe:	13 96       	adiw	r26, 0x03	; 3
 600:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
 602:	90 81       	ld	r25, Z
 604:	9f 5f       	subi	r25, 0xFF	; 255
 606:	90 83       	st	Z, r25

	return ans;
}
 608:	08 95       	ret

0000060a <USART_RXComplete>:
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
 60a:	fc 01       	movw	r30, r24
 60c:	ed 5f       	subi	r30, 0xFD	; 253
 60e:	fd 4f       	sbci	r31, 0xFD	; 253
 610:	20 81       	ld	r18, Z
 612:	2f 5f       	subi	r18, 0xFF	; 255

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
 614:	fc 01       	movw	r30, r24
 616:	ec 5f       	subi	r30, 0xFC	; 252
 618:	fd 4f       	sbci	r31, 0xFD	; 253
 61a:	30 81       	ld	r19, Z
	uint8_t data = usart_data->usart->DATA;
 61c:	dc 01       	movw	r26, r24
 61e:	ed 91       	ld	r30, X+
 620:	fc 91       	ld	r31, X
 622:	11 97       	sbiw	r26, 0x01	; 1
 624:	40 81       	ld	r20, Z

	if (tempRX_Head == tempRX_Tail) {
 626:	23 17       	cp	r18, r19
 628:	59 f0       	breq	.+22     	; 0x640 <USART_RXComplete+0x36>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
 62a:	fc 01       	movw	r30, r24
 62c:	ed 5f       	subi	r30, 0xFD	; 253
 62e:	fd 4f       	sbci	r31, 0xFD	; 253
 630:	30 81       	ld	r19, Z
 632:	a3 0f       	add	r26, r19
 634:	b1 1d       	adc	r27, r1
 636:	13 96       	adiw	r26, 0x03	; 3
 638:	4c 93       	st	X, r20
		usart_data->buffer.RX_Head = tempRX_Head;
 63a:	20 83       	st	Z, r18
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
 640:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
 642:	08 95       	ret

00000644 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
 644:	cf 93       	push	r28
 646:	df 93       	push	r29
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
 648:	fc 01       	movw	r30, r24
 64a:	ea 5f       	subi	r30, 0xFA	; 250
 64c:	fd 4f       	sbci	r31, 0xFD	; 253
 64e:	20 81       	ld	r18, Z
	if (bufPtr->TX_Head == tempTX_Tail){
 650:	fc 01       	movw	r30, r24
 652:	eb 5f       	subi	r30, 0xFB	; 251
 654:	fd 4f       	sbci	r31, 0xFD	; 253
 656:	30 81       	ld	r19, Z
 658:	32 13       	cpse	r19, r18
 65a:	07 c0       	rjmp	.+14     	; 0x66a <USART_DataRegEmpty+0x26>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
 65c:	dc 01       	movw	r26, r24
 65e:	ed 91       	ld	r30, X+
 660:	fc 91       	ld	r31, X
 662:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
 664:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
 666:	83 83       	std	Z+3, r24	; 0x03
 668:	11 c0       	rjmp	.+34     	; 0x68c <USART_DataRegEmpty+0x48>

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
 66a:	fc 01       	movw	r30, r24
 66c:	ea 5f       	subi	r30, 0xFA	; 250
 66e:	fd 4f       	sbci	r31, 0xFD	; 253
 670:	20 81       	ld	r18, Z
 672:	dc 01       	movw	r26, r24
 674:	a2 0f       	add	r26, r18
 676:	b1 1d       	adc	r27, r1
 678:	ad 5f       	subi	r26, 0xFD	; 253
 67a:	be 4f       	sbci	r27, 0xFE	; 254
 67c:	2c 91       	ld	r18, X
		usart_data->usart->DATA = data;
 67e:	ec 01       	movw	r28, r24
 680:	a8 81       	ld	r26, Y
 682:	b9 81       	ldd	r27, Y+1	; 0x01
 684:	2c 93       	st	X, r18

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
 686:	80 81       	ld	r24, Z
 688:	8f 5f       	subi	r24, 0xFF	; 255
 68a:	80 83       	st	Z, r24
	}
}
 68c:	df 91       	pop	r29
 68e:	cf 91       	pop	r28
 690:	08 95       	ret

00000692 <_exit>:
 692:	f8 94       	cli

00000694 <__stop_program>:
 694:	ff cf       	rjmp	.-2      	; 0x694 <__stop_program>
